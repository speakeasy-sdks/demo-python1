"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from dataservice import utils
from dataservice.models import components, errors, operations
from typing import Any, Optional

class Profile:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def log(self, request: components.LogRequest) -> operations.LogResponse:
        r"""Profile tabular data
        Profile tabular data. The Swagger UI isn't able to call this currently.

        ## Sample curl request:

        ```bash
        curl -X 'POST'         -H \"X-API-Key: <password>\"         -H \"Content-Type: application/json\"         'http://localhost:8000/log'         --data-raw '{
            \"datasetId\": \"model-62\",
            \"multiple\": {
                \"columns\": [ \"age\", \"workclass\", \"fnlwgt\", \"education\" ],
                \"data\": [
                    [ 25, \"Private\", 226802, \"11th\" ]
                ]
            }
        }'
        ```
        ## Sample Python client request:
        ```python
        from whylogs_container_client import AuthenticatedClient
        import whylogs_container_client.api.profile.log as Log
        from whylogs_container_client.models import LogRequest, LogMultiple
        from datetime import datetime

        client = AuthenticatedClient(base_url=\"http://localhost:8000\", token=\"password\", prefix=\"\", auth_header_name=\"X-API-Key\")

        data = LogRequest(
            dataset_id=\"model-1\",
            timestamp=int(datetime.now().timestamp() * 1000),
            multiple=LogMultiple(
                columns=[\"col1\", \"col2\"],
                data=[[1, 2], [3, 4]],
            )
        )

        response = Log.sync_detailed(client=client, json_body=data)
        if response.status_code != 200:
            raise Exception(f\"Failed to log data. Status code: {response.status_code}\")
        # API is async, it won't fail and has no return body
        ```

        ## Sample Python request (using `requests`):
        ```python
        import requests

        # Define your API key
        api_key = \"<password>\"

        # API endpoint
        url = 'http://localhost:8000/log'

        # Sample data
        data = {
            \"datasetId\": \"model-62\",
            \"multiple\": {
                \"columns\": [\"age\", \"workclass\", \"fnlwgt\", \"education\"],
                \"data\": [
                    [25, \"Private\", 226802, \"11th\"]
                ]
            }
        }

        # Make the POST request
        headers = {\"X-API-Key\": api_key}
        response = requests.post(url, json=data, headers=headers)
        ```
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/log'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, components.LogRequest, "request", False, False, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.LogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def log_embeddings(self, request: components.LogEmbeddingRequest) -> operations.LogEmbeddingsResponse:
        r"""Profile embeddings
        This endpoint requires a custom configuration to set up before hand. See https://docs.whylabs.ai/docs/integrations-whylogs-container/
        for setting up embeddings support.

        Log embeddings data. The Swagger UI isn't able to call this currently.

        ## Sample curl request:

        ```bash
        curl -X 'POST'         -H \"X-API-Key: <password>\"         -H \"Content-Type: application/octet-stream\"         'http://localhost:8000/log-embeddings'         --data-raw '{
            \"datasetId\": \"model-62\",
            \"timestamp\": 1634235000,
            \"embeddings\": {
                \"embeddings\": [[0.12, 0.45, 0.33, 0.92]]
            }
        }'
        ```

        ## Sample Python request (using `requests`):
        ```python
        import requests

        # Define your API key
        api_key = \"<password>\"

        # API endpoint
        url = 'http://localhost:8000/log-embeddings'

        # Sample data
        data = {
            \"datasetId\": \"model-62\",
            \"timestamp\": 1634235000,  # an example timestamp
            \"embeddings\": {
                \"embeddings\": [[0.12, 0.45, 0.33, 0.92]]
            }
        }

        # Make the POST request
        headers = {\"X-API-Key\": api_key, \"Content-Type\": \"application/octet-stream\"}
        response = requests.post(url, json=data, headers=headers)
        ```
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/log-embeddings'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, components.LogEmbeddingRequest, "request", False, False, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.LogEmbeddingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def log_pubsub(self) -> operations.LogPubsubResponse:
        r"""Log Pubsub"""
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/log-pubsub'
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.LogPubsubResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def log_pubsub_embedding(self) -> operations.LogPubsubEmbeddingResponse:
        r"""Log Pubsub Embeddings"""
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/log-pubsub-embeddings'
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.LogPubsubEmbeddingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.any = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    