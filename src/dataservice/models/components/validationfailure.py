"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from dataservice import utils
from typing import List, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidationFailure:
    UNSET='__SPEAKEASY_UNSET__'
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    metric: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric') }})
    details: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details') }})
    value: Optional[Union[int, float, str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    upper_threshold: Optional[float] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upper_threshold'), 'exclude': lambda f: f is ValidationFailure.UNSET }})
    lower_threshold: Optional[float] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lower_threshold'), 'exclude': lambda f: f is ValidationFailure.UNSET }})
    allowed_values: Optional[List[Union[str, float, int]]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_values'), 'exclude': lambda f: f is ValidationFailure.UNSET }})
    disallowed_values: Optional[List[Union[str, float, int]]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disallowed_values'), 'exclude': lambda f: f is ValidationFailure.UNSET }})
    must_be_none: Optional[bool] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('must_be_none'), 'exclude': lambda f: f is ValidationFailure.UNSET }})
    must_be_non_none: Optional[bool] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('must_be_non_none'), 'exclude': lambda f: f is ValidationFailure.UNSET }})
    

